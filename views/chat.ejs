<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= otherUsername %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            transition: background 0.3s ease;
        }

        body.dark-mode {
            background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
        }

        .container {
            max-width: 520px;
            width: 100%;
            background: #fff;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 85vh;
            max-height: 700px;
            animation: slideUp 0.5s ease;
        }

        body.dark-mode .container {
            background: #2d3748;
            color: #e2e8f0;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            padding: 16px 20px;
            display: flex;
            align-items: center;
            gap: 14px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .back-button {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: #fff;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            font-size: 20px;
        }

        .back-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .profile-badge {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.95);
            color: #667eea;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: 700;
            position: relative;
        }

        .status-dot {
            position: absolute;
            bottom: 0;
            right: 0;
            width: 12px;
            height: 12px;
            background: #cbd5e0;
            border: 2px solid #fff;
            border-radius: 50%;
            transition: background 0.3s ease;
        }

        .status-dot.online {
            background: #48bb78;
        }

        .user-info {
            flex: 1;
        }

        .username {
            font-size: 17px;
            font-weight: 600;
            margin-bottom: 2px;
        }

        .user-status {
            font-size: 12px;
            opacity: 0.9;
        }

        .header-actions {
            display: flex;
            gap: 8px;
        }

        .header-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: #fff;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }

        .header-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .search-bar {
            padding: 12px 20px;
            background: rgba(0, 0, 0, 0.03);
            border-bottom: 1px solid #e1e8ed;
            display: none;
        }

        body.dark-mode .search-bar {
            background: rgba(0, 0, 0, 0.2);
        }

        .search-bar.show {
            display: block;
        }

        #chatSearch {
            width: 100%;
            padding: 10px 16px;
            border: 2px solid #e1e8ed;
            border-radius: 20px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        body.dark-mode #chatSearch {
            background: #1a202c;
            color: #e2e8f0;
            border-color: #4a5568;
        }

        #chatSearch:focus {
            outline: none;
            border-color: #667eea;
        }

        #chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
            background-image: 
                repeating-linear-gradient(45deg, transparent, transparent 10px, rgba(255,255,255,.03) 10px, rgba(255,255,255,.03) 20px);
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        body.dark-mode #chat-messages {
            background: #1a202c;
        }

        .date-separator {
            text-align: center;
            margin: 20px 0 10px;
        }

        .date-badge {
            background: rgba(0, 0, 0, 0.06);
            color: #666;
            padding: 6px 14px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 500;
            display: inline-block;
        }

        body.dark-mode .date-badge {
            background: rgba(255, 255, 255, 0.1);
            color: #cbd5e0;
        }

        .message {
            max-width: 75%;
            padding: 10px 14px;
            border-radius: 12px;
            word-break: break-word;
            position: relative;
            font-size: 15px;
            line-height: 1.5;
            display: flex;
            flex-direction: column;
            animation: messageSlide 0.3s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        @keyframes messageSlide {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .my-message {
            align-self: flex-end;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            border-bottom-right-radius: 4px;
        }

        .other-message {
            align-self: flex-start;
            background: #fff;
            color: #333;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
        }

        body.dark-mode .other-message {
            background: #4a5568;
            color: #e2e8f0;
        }

        .message-content {
            margin-bottom: 4px;
        }

        .message-content img {
            display: block;
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .message-content img:hover {
            transform: scale(1.02);
        }

        .message-content video {
            display: block;
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            margin-bottom: 8px;
        }

        .file-container {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: rgba(0, 0, 0, 0.05);
            border-radius: 8px;
            margin-bottom: 8px;
        }

        body.dark-mode .file-container {
            background: rgba(255, 255, 255, 0.1);
        }

        .file-icon {
            font-size: 24px;
        }

        .message-footer {
            display: flex;
            justify-content: flex-end;
            align-items: center;
            gap: 4px;
            font-size: 11px;
            opacity: 0.8;
            margin-top: 4px;
        }

        .my-message .message-footer {
            color: rgba(255, 255, 255, 0.9);
        }

        .other-message .message-footer {
            color: #718096;
        }

        .message-status {
            display: flex;
            align-items: center;
        }

        .message-reactions {
            display: none;
            position: absolute;
            bottom: -35px;
            right: 0;
            background: white;
            border-radius: 20px;
            padding: 6px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);
            z-index: 10;
        }

        body.dark-mode .message-reactions {
            background: #4a5568;
        }

        .message:hover .message-reactions {
            display: flex;
            gap: 4px;
        }

        .react-btn {
            border: none;
            background: none;
            font-size: 20px;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .react-btn:hover {
            background: rgba(0, 0, 0, 0.05);
            transform: scale(1.2);
        }

        .message-reaction-display {
            margin-top: 4px;
            font-size: 14px;
        }

        .typing-indicator {
            display: none;
            align-self: flex-start;
            background: #fff;
            padding: 16px 20px;
            border-radius: 12px;
            border-bottom-left-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
            max-width: 75px;
        }

        body.dark-mode .typing-indicator {
            background: #4a5568;
        }

        .typing-indicator.show {
            display: block;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #cbd5e0;
            border-radius: 50%;
            animation: typingAnimation 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typingAnimation {
            0%, 60%, 100% {
                transform: translateY(0);
                background: #cbd5e0;
            }
            30% {
                transform: translateY(-10px);
                background: #a0aec0;
            }
        }

        .input-container {
            padding: 16px 20px;
            background: #fff;
            border-top: 1px solid #e1e8ed;
        }

        body.dark-mode .input-container {
            background: #2d3748;
            border-top-color: #4a5568;
        }

        #input-row {
            display: flex;
            gap: 10px;
            align-items: flex-end;
        }

        .input-actions {
            display: flex;
            gap: 6px;
        }

        .input-btn {
            background: transparent;
            border: none;
            color: #667eea;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 8px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .input-btn:hover {
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.1);
        }

        .input-wrapper {
            flex: 1;
            position: relative;
        }

        #message-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e8ed;
            border-radius: 24px;
            font-size: 15px;
            font-family: inherit;
            resize: none;
            max-height: 100px;
            min-height: 44px;
            transition: all 0.3s ease;
            line-height: 1.5;
        }

        body.dark-mode #message-input {
            background: #1a202c;
            color: #e2e8f0;
            border-color: #4a5568;
        }

        #message-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        #send-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            border: none;
            width: 44px;
            height: 44px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        #send-button:hover:not(:disabled) {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        #send-button:active:not(:disabled) {
            transform: scale(0.95);
        }

        #send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .emoji-picker {
            display: none;
            position: absolute;
            bottom: 60px;
            right: 0;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
            padding: 12px;
            z-index: 10;
            max-width: 280px;
        }

        body.dark-mode .emoji-picker {
            background: #4a5568;
        }

        .emoji-picker.show {
            display: block;
            animation: fadeIn 0.2s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .emoji-grid {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            gap: 6px;
            max-height: 200px;
            overflow-y: auto;
        }

        .emoji-item {
            font-size: 24px;
            cursor: pointer;
            padding: 6px;
            border-radius: 6px;
            transition: all 0.2s ease;
            text-align: center;
        }

        .emoji-item:hover {
            background: #f0f0f0;
            transform: scale(1.2);
        }

        body.dark-mode .emoji-item:hover {
            background: #2d3748;
        }

        #chat-messages::-webkit-scrollbar,
        .emoji-grid::-webkit-scrollbar {
            width: 6px;
        }

        #chat-messages::-webkit-scrollbar-track,
        .emoji-grid::-webkit-scrollbar-track {
            background: transparent;
        }

        #chat-messages::-webkit-scrollbar-thumb,
        .emoji-grid::-webkit-scrollbar-thumb {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 3px;
        }

        #chat-messages::-webkit-scrollbar-thumb:hover,
        .emoji-grid::-webkit-scrollbar-thumb:hover {
            background: rgba(0, 0, 0, 0.3);
        }

        #fileInput {
            display: none;
        }

        @media (max-width: 480px) {
            body {
                padding: 0;
            }

            .container {
                max-height: 100vh;
                height: 100vh;
                border-radius: 0;
            }

            .message {
                max-width: 85%;
            }
        }

        /* --- ADDITIONAL STYLES FOR LIGHTBOX AND CALL MODAL --- */
      .image-viewer { display:none; position:fixed; top:0; left:0; right:0; bottom:0; z-index:9999; background:rgba(0,0,0,0.93); align-items:center; justify-content:center; }
      .image-viewer.show { display:flex; flex-direction:column; }
      .viewer-content { flex:1; display:flex; align-items:center; justify-content:center; }
      .viewer-image { max-width:95vw; max-height:85vh; border-radius:12px; box-shadow:0 8px 32px rgba(0,0,0,.5);}
      .viewer-close{position:absolute;top:32px;right:38px;font-size:50px;color:#fff;cursor:pointer;background:none;border:none;z-index:10000;}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <a href="/users?me=<%= encodeURIComponent(me) %>" class="back-button">
                ←
            </a>
            <div class="profile-badge">
                <%= otherUserProfile.username[0].toUpperCase() %>
                <span class="status-dot" id="statusDot"></span>
            </div>
            <div class="user-info">
                <div class="username"><%= otherUserProfile.username %></div>
                <div class="user-status" id="userStatus">Offline</div>
            </div>
            <div class="header-actions">
                <button class="header-btn" id="searchBtn" title="Search">🔍</button>
                <button class="header-btn" id="themeBtn" title="Toggle Theme">🌙</button>
                <button class="header-btn" title="More">⋮</button>
            </div>
        </div>

        <div class="search-bar" id="searchBar">
            <input type="text" id="chatSearch" placeholder="Search messages...">
        </div>

        <!-- Call modal and related UI removed -->

        <div class="image-viewer" id="imageViewer">
            <button class="viewer-close" id="viewerClose">&times;</button>
            <div class="viewer-content"><img src="" class="viewer-image" id="viewerImage"></div>
        </div>

        <div id="chat-messages">
            <div class="date-separator">
                <span class="date-badge" id="todayBadge">Today</span>
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots">
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
                <span class="typing-dot"></span>
            </div>
        </div>

        <div class="input-container">
            <div id="input-row">
                <div class="input-actions">
                    <input type="file" id="fileInput" accept="image/*,video/*,.pdf,.doc,.docx">
                    <button class="input-btn" id="fileBtn" title="Attach File">📎</button>
                    <button class="input-btn" id="emojiBtn" title="Emoji">😊</button>
                </div>
                <div class="input-wrapper">
                    <textarea 
                        id="message-input" 
                        placeholder="Type a message..."
                        rows="1"
                    ></textarea>
                    <div class="emoji-picker" id="emojiPicker">
                        <div class="emoji-grid" id="emojiGrid"></div>
                    </div>
                </div>
                <button id="send-button" title="Send">
                    ➤
                </button>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const me = "<%= me %>";
        const other = "<%= otherUsername %>";
        
        console.log('🔌 Initializing socket for user:', me);
        console.log('👤 Chatting with:', other);
        
        socket.on('connect', () => {
            console.log('✅ Socket connected:', socket.id);
            socket.emit('register user', me);
            socket.emit('mark-as-read', { from: other, to: me });
        });
        
        socket.on('reconnect', () => {
            console.log('🔄 Socket reconnected');
            socket.emit('register user', me);
        });

        const chatMessages = document.getElementById('chat-messages');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const typingIndicator = document.getElementById('typingIndicator');
        const emojiBtn = document.getElementById('emojiBtn');
        const emojiPicker = document.getElementById('emojiPicker');
        const emojiGrid = document.getElementById('emojiGrid');
        const fileBtn = document.getElementById('fileBtn');
        const fileInput = document.getElementById('fileInput');
        const searchBtn = document.getElementById('searchBtn');
        const searchBar = document.getElementById('searchBar');
        const chatSearch = document.getElementById('chatSearch');
        const themeBtn = document.getElementById('themeBtn');
        const statusDot = document.getElementById('statusDot');
        const userStatus = document.getElementById('userStatus');

        // Image viewer elements
        const imageViewer = document.getElementById('imageViewer');
        const viewerImage = document.getElementById('viewerImage');
        const viewerClose = document.getElementById('viewerClose');
        let typingTimeout;
        let isTyping = false;

        // Theme toggle
        themeBtn.addEventListener('click', () => {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            themeBtn.textContent = isDark ? '☀️' : '🌙';
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });

        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-mode');
            themeBtn.textContent = '☀️';
        }

        // Search
        searchBtn.addEventListener('click', () => {
            searchBar.classList.toggle('show');
            if (searchBar.classList.contains('show')) {
                chatSearch.focus();
            } else {
                chatSearch.value = '';
                document.querySelectorAll('.message').forEach(msg => {
                    msg.style.display = 'flex';
                });
            }
        });

        chatSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const messages = document.querySelectorAll('.message');
            
            messages.forEach(msg => {
                const text = msg.querySelector('.message-content').textContent.toLowerCase();
                if (text.includes(searchTerm) || searchTerm === '') {
                    msg.style.display = 'flex';
                } else {
                    msg.style.display = 'none';
                }
            });
        });

        // User status
        socket.on('user-status', (data) => {
            if (data.username === other) {
                if (data.online) {
                    statusDot.classList.add('online');
                    userStatus.textContent = 'Online';
                } else {
                    statusDot.classList.remove('online');
                    userStatus.textContent = 'Offline';
                }
            }
        });

        // Read receipts
        socket.on('messages-read', (data) => {
            if (data.user === other) {
                document.querySelectorAll('.my-message').forEach(msg => {
                    const status = msg.querySelector('.message-status');
                    if (status) {
                        status.textContent = '✓✓';
                        status.style.color = '#4fc3f7';
                    }
                });
            }
        });

        // Emoji functionality
        const emojis = ['😊', '😂', '❤️', '👍', '🎉', '😍', '😢', '😎', '🤔', '😴', '🔥', '✨', '💯', '👏', '🙏', '💪', '🎈', '🎂', '🎁', '⭐', '🌟', '💫', '✅', '❌', '🚀', '💡', '📱', '💻', '📧', '🔔', '⏰', '☕'];

        emojis.forEach(emoji => {
            const emojiSpan = document.createElement('span');
            emojiSpan.className = 'emoji-item';
            emojiSpan.textContent = emoji;
            emojiSpan.onclick = () => insertEmoji(emoji);
            emojiGrid.appendChild(emojiSpan);
        });

        emojiBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            emojiPicker.classList.toggle('show');
        });

        document.addEventListener('click', (e) => {
            if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) {
                emojiPicker.classList.remove('show');
            }
        });

        function insertEmoji(emoji) {
            messageInput.value += emoji;
            messageInput.focus();
            emojiPicker.classList.remove('show');
            sendButton.disabled = false;
        }

        // File upload
        fileBtn.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            console.log('📎 Selected file:', {
                name: file.name,
                size: file.size,
                type: file.type
            });
            
            if (file.size > 10 * 1024 * 1024) {
                alert('File too large. Max 10MB');
                return;
            }
            
            const formData = new FormData();
            formData.append('file', file);
            formData.append('from', me);
            formData.append('to', other);
            
            try {
                console.log('📤 Uploading file...');
                const response = await fetch('/api/upload-file', {
                    method: 'POST',
                    body: formData
                });
                
                console.log('📥 Response status:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('✅ Upload successful:', data);
                    
                    socket.emit('private message', {
                        from: me,
                        to: other,
                        message: `📎 ${file.name}`,
                        fileUrl: data.fileUrl,
                        fileType: data.fileType
                    });
                } else {
                    const errorText = await response.text();
                    console.error('❌ Upload failed:', errorText);
                    alert('Failed to upload file: ' + errorText);
                }
                
                fileInput.value = '';
            } catch (error) {
                console.error('❌ File upload error:', error);
                alert('Failed to upload file: ' + error.message);
            }
        });

        // Chat functionality
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 100) + 'px';
            
            sendButton.disabled = !this.value.trim();

            if (!isTyping && this.value.trim()) {
                socket.emit('typing', { from: me, to: other, typing: true });
                isTyping = true;
            }

            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('typing', { from: me, to: other, typing: false });
                isTyping = false;
            }, 1000);
        });

        socket.on('typing', (data) => {
            if (data.from === other && data.to === me) {
                if (data.typing) {
                    typingIndicator.classList.add('show');
                    chatMessages.appendChild(typingIndicator);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                } else {
                    typingIndicator.classList.remove('show');
                }
            }
        });

        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function reactToMessage(btn, reaction) {
            const messageDiv = btn.closest('.message');
            let reactionDisplay = messageDiv.querySelector('.message-reaction-display');
            
            if (!reactionDisplay) {
                reactionDisplay = document.createElement('div');
                reactionDisplay.className = 'message-reaction-display';
                messageDiv.querySelector('.message-content').appendChild(reactionDisplay);
            }
            
            reactionDisplay.textContent = reaction;
            
            socket.emit('message-reaction', {
                from: me,
                to: other,
                reaction: reaction,
                messageId: messageDiv.dataset.messageId
            });
        }

        function appendMessage(sender, msg, time, status = 'sent', fileUrl = null, fileType = null, messageId = null) {
            const isMe = sender === me;
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ' + (isMe ? 'my-message' : 'other-message');
            // Use real messageId if provided, else fallback to Date.now()
            messageDiv.dataset.messageId = messageId || Date.now();

            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            if (fileUrl && fileType) {
                if (fileType.startsWith('image/')) {
                    const img = document.createElement('img');
                    img.src = fileUrl;
                    img.alt = 'Image attachment';
                    img.onclick = (e) => {
                        e.preventDefault();
                        viewerImage.src = fileUrl;
                        imageViewer.classList.add('show');
                    };
                    contentDiv.appendChild(img);
                    
                    if (msg && !msg.startsWith('📎')) {
                        const caption = document.createElement('div');
                        caption.textContent = msg;
                        caption.style.marginTop = '8px';
                        contentDiv.appendChild(caption);
                    }
                } else if (fileType.startsWith('video/')) {
                    const video = document.createElement('video');
                    video.src = fileUrl;
                    video.controls = true;
                    contentDiv.appendChild(video);
                    
                    if (msg && !msg.startsWith('📎')) {
                        const caption = document.createElement('div');
                        caption.textContent = msg;
                        caption.style.marginTop = '8px';
                        contentDiv.appendChild(caption);
                    }
                } else {
                    const docLink = document.createElement('a');
                    docLink.href = fileUrl;
                    docLink.target = '_blank';
                    docLink.className = 'file-container';
                    docLink.style.textDecoration = 'none';
                    docLink.style.color = 'inherit';
                    docLink.style.cursor = 'pointer';
                    
                    const fileIcon = document.createElement('span');
                    fileIcon.className = 'file-icon';
                    fileIcon.textContent = '📄';
                    
                    const fileName = document.createElement('div');
                    fileName.textContent = msg.replace('📎 ', '');
                    
                    docLink.appendChild(fileIcon);
                    docLink.appendChild(fileName);
                    contentDiv.appendChild(docLink);
                }
            } else {
                contentDiv.textContent = msg;
            }

            const footerDiv = document.createElement('div');
            footerDiv.className = 'message-footer';

            const timeSpan = document.createElement('span');
            timeSpan.textContent = formatTime(time);
            footerDiv.appendChild(timeSpan);

            if (isMe) {
                const statusSpan = document.createElement('span');
                statusSpan.className = 'message-status';
                statusSpan.textContent = status === 'read' ? '✓✓' : (status === 'sending' ? '⏳' : '✓');
                statusSpan.style.color = status === 'read' ? '#4fc3f7' : 'inherit';
                footerDiv.appendChild(statusSpan);
            }

            const reactionsDiv = document.createElement('div');
            reactionsDiv.className = 'message-reactions';
            ['❤️', '👍', '😂', '😮', '😢', '🔥'].forEach(emoji => {
                const reactBtn = document.createElement('button');
                reactBtn.className = 'react-btn';
                reactBtn.textContent = emoji;
                reactBtn.onclick = () => reactToMessage(reactBtn, emoji);
                reactionsDiv.appendChild(reactBtn);
            });

            messageDiv.appendChild(contentDiv);
            messageDiv.appendChild(footerDiv);
            messageDiv.appendChild(reactionsDiv);

            if (typingIndicator.classList.contains('show')) {
                chatMessages.insertBefore(messageDiv, typingIndicator);
            } else {
                chatMessages.appendChild(messageDiv);
            }

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function loadHistory() {
            const res = await fetch(`/api/chat-history?user1=${encodeURIComponent(me)}&user2=${encodeURIComponent(other)}`);
            if (res.ok) {
                const history = await res.json();
                chatMessages.innerHTML = '<div class="date-separator"><span class="date-badge">Today</span></div>';
                history.forEach(msg => {
                    appendMessage(
                        msg.from, 
                        msg.message, 
                        msg.timestamp, 
                        msg.status || (msg.seen ? 'read' : 'sent'),
                        msg.fileUrl,
                        msg.fileType,
                        msg._id // Pass the real messageId
                    );
                });
            }
        }

        loadHistory();

        socket.on('private message', (data) => {
            if ((data.from === me && data.to === other) || (data.from === other && data.to === me)) {
                appendMessage(
                    data.from, 
                    data.message, 
                    new Date(), 
                    data.status,
                    data.fileUrl,
                    data.fileType,
                    data.messageId // Use the real messageId
                );
                
                if (data.from === other) {
                    playNotificationSound();
                }
            }
        });

        socket.on('message-reaction', (data) => {
            const messageDiv = document.querySelector(`[data-message-id="${data.messageId}"]`);
            if (messageDiv) {
                let reactionDisplay = messageDiv.querySelector('.message-reaction-display');
                if (!reactionDisplay) {
                    reactionDisplay = document.createElement('div');
                    reactionDisplay.className = 'message-reaction-display';
                    messageDiv.querySelector('.message-content').appendChild(reactionDisplay);
                }
                reactionDisplay.textContent = data.reaction;
            }
        });

        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                socket.emit('private message', { from: me, to: other, message });
                messageInput.value = '';
                messageInput.style.height = 'auto';
                sendButton.disabled = true;

                if (isTyping) {
                    socket.emit('typing', { from: me, to: other, typing: false });
                    isTyping = false;
                }
            }
        }

        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        viewerClose.addEventListener('click', () => {
            imageViewer.classList.remove('show');
        });
        imageViewer.addEventListener('click', (e) => {
            if (e.target === imageViewer) {
                imageViewer.classList.remove('show');
            }
        });
        sendButton.disabled = true;

        function playNotificationSound() {
            const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBiqF0fPTgjMGHm7A7+OZRQ0RVKzn7q9cGAY+ltrzxnMoBSl+zPDblkMKE1Ou5+2nUxQKRp/g8r5sIQYqhdHz04IzBh5uwO/jmUUNEVSs5+6vXBgGPpba88ZzKAUpfsz');
            audio.volume = 0.3;
            audio.play().catch(e => console.log('Sound play failed:', e));
        }

        console.log('✅ Chat loaded successfully!');
    </script>
</body>
</html>
