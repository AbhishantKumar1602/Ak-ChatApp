<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users - Ak Chats</title>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            max-width: 480px;
            width: 100%;
            background: #fff;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            max-height: 90vh;
            animation: slideUp 0.5s ease;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .app-icon {
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        h2 {
            font-size: 24px;
            font-weight: 600;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .header-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: #fff;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
        }

        .header-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        /* Search Bar */
        .search-container {
            padding: 16px;
            background: #f8f9fa;
            border-bottom: 1px solid #e1e8ed;
        }

        .search-wrapper {
            position: relative;
        }

        .search-icon {
            position: absolute;
            left: 14px;
            top: 50%;
            transform: translateY(-50%);
            color: #999;
            font-size: 16px;
        }

        #searchInput {
            width: 100%;
            padding: 12px 12px 12px 42px;
            border: 2px solid #e1e8ed;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
            background: #fff;
        }

        #searchInput:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* User List */
        .user-list-container {
            flex: 1;
            overflow-y: auto;
        }

        ul {
            list-style: none;
        }

        li {
            border-bottom: 1px solid #f0f0f0;
            transition: all 0.3s ease;
        }

        li:hover {
            background: #f8f9fa;
        }

        li:last-child {
            border-bottom: none;
        }

        .user-row {
            display: flex;
            align-items: center;
            padding: 16px;
            gap: 14px;
            position: relative;
            cursor: pointer;
        }

        .user-link {
            display: flex;
            align-items: center;
            gap: 14px;
            flex: 1;
            text-decoration: none;
            color: inherit;
        }

        /* Profile Badge */
        .profile-badge {
            position: relative;
            min-width: 52px;
            height: 52px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 22px;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .status-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 14px;
            height: 14px;
            border-radius: 50%;
            border: 2px solid #fff;
            background: #48bb78;
        }

        .status-indicator.offline {
            background: #cbd5e0;
        }

        /* User Info */
        .user-info {
            flex: 1;
            min-width: 0;
        }

        .user-name {
            font-weight: 600;
            font-size: 16px;
            color: #1a202c;
            margin-bottom: 4px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .verified-badge {
            color: #667eea;
            font-size: 14px;
        }

        .last-message {
            color: #718096;
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 220px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .message-status {
            font-size: 12px;
        }

        /* Right Info */
        .right-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 6px;
            min-width: 60px;
        }

        .last-time {
            font-size: 12px;
            color: #718096;
        }

        /* Unread Badge */
        .unread-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #fff;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            padding: 3px 8px;
            min-width: 22px;
            text-align: center;
            display: inline-block;
            box-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }

        /* Empty State */
        .empty-state {
            display: none;
            text-align: center;
            padding: 60px 20px;
            color: #718096;
        }

        .empty-state.show {
            display: block;
        }

        .empty-icon {
            font-size: 64px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        .empty-text {
            font-size: 16px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .empty-subtext {
            font-size: 14px;
        }

        /* Scrollbar Styling */
        .user-list-container::-webkit-scrollbar {
            width: 6px;
        }

        .user-list-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .user-list-container::-webkit-scrollbar-thumb {
            background: #cbd5e0;
            border-radius: 3px;
        }

        .user-list-container::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

        /* Loading State */
        .loading {
            display: none;
            text-align: center;
            padding: 40px;
            color: #718096;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 40px;
            height: 40px;
            margin: 0 auto 16px;
            border: 4px solid #e1e8ed;
            border-top-color: #667eea;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @media (max-width: 480px) {
            body {
                padding: 0;
            }

            .container {
                max-height: 100vh;
                border-radius: 0;
            }

            .last-message {
                max-width: 160px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <div class="app-icon">üí¨</div>
                <h2>Ak Chats</h2>
            </div>
            <div class="header-actions">
                <button class="header-btn" title="Logout" onclick="logout()">üö™</button>
            </div>
        </div>

        <div class="search-container">
            <div class="search-wrapper">
                <span class="search-icon">üîç</span>
                <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search conversations..."
                    autocomplete="off"
                >
            </div>
        </div>

        <div class="user-list-container">
            <div class="loading show">
                <div class="spinner"></div>
                <p>Loading conversations...</p>
            </div>

            <ul id="user-list"></ul>

            <div class="empty-state" id="emptyState">
                <div class="empty-icon">üí¨</div>
                <div class="empty-text">No conversations found</div>
                <div class="empty-subtext">Start a new chat to get started</div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // ===================================
        // Global Variables
        // ===================================
        window.socket = window.socket || io();
        window.me = window.me || "<%= me %>";

        const UPDATE_INTERVAL = 1000;
        let allUsers = [];

        // ===================================
        // DOM Elements
        // ===================================
        const userListElement = document.getElementById('user-list');
        const searchInput = document.getElementById('searchInput');
        const emptyState = document.getElementById('emptyState');
        const loadingState = document.querySelector('.loading');

        // ===================================
        // Utility Functions
        // ===================================
        
        function formatTime(timestamp) {
            if (!timestamp) return '';
            
            const date = new Date(timestamp);
            const now = new Date();
            const diffInMs = now - date;
            const diffInHours = diffInMs / (1000 * 60 * 60);
            const diffInDays = diffInMs / (1000 * 60 * 60 * 24);

            if (diffInHours < 24) {
                return date.toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            } else if (diffInDays < 7) {
                return date.toLocaleDateString([], { weekday: 'short' });
            } else {
                return date.toLocaleDateString([], { 
                    month: 'short', 
                    day: 'numeric' 
                });
            }
        }

        function getInitials(username) {
            return username.substring(0, 2).toUpperCase();
        }

        function truncateMessage(message, maxLength = 35) {
            if (!message || message.length <= maxLength) return message || 'No messages yet';
            return message.substring(0, maxLength) + '...';
        }

        function createUserRow(user) {
            const row = document.createElement('li');
            row.className = 'user-row';
            row.setAttribute('data-username', user.username);

            const unreadBadge = user.unreadCount > 0 
                ? `<span class="unread-badge">${user.unreadCount}</span>` 
                : '';

            const statusIndicator = user.online 
                ? '<span class="status-indicator"></span>' 
                : '<span class="status-indicator offline"></span>';

            const messageStatus = user.lastMessageSent ? '‚úì' : '';

            row.innerHTML = `
                <a href="/chat?user=${encodeURIComponent(user.username)}&me=${encodeURIComponent(window.me)}" 
                   class="user-link">
                    <div class="profile-badge">
                        ${getInitials(user.username)}
                        ${statusIndicator}
                    </div>
                    <div class="user-info">
                        <div class="user-name">
                            ${user.username}
                        </div>
                        <div class="last-message">
                            <span class="message-status">${messageStatus}</span>
                            ${truncateMessage(user.lastMessage)}
                        </div>
                    </div>
                </a>
                <div class="right-info">
                    <span class="last-time">${formatTime(user.lastTime)}</span>
                    ${unreadBadge}
                </div>
            `;

            return row;
        }

        // ===================================
        // Core Functions
        // ===================================

        function renderUserList(users) {
            userListElement.innerHTML = '';
            loadingState.classList.remove('show');

            if (users.length === 0) {
                emptyState.classList.add('show');
                return;
            }

            emptyState.classList.remove('show');
            users.forEach(user => {
                const row = createUserRow(user);
                userListElement.appendChild(row);
            });
        }

        function filterUsers(searchTerm) {
            const filtered = allUsers.filter(user => 
                user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (user.lastMessage && user.lastMessage.toLowerCase().includes(searchTerm.toLowerCase()))
            );
            renderUserList(filtered);
        }

        async function updateUserList() {
            try {
                const res = await fetch(`/api/userlist?me=${encodeURIComponent(window.me)}`);
                
                if (res.ok) {
                    allUsers = await res.json();
                    const searchTerm = searchInput.value;
                    if (searchTerm) {
                        filterUsers(searchTerm);
                    } else {
                        renderUserList(allUsers);
                    }
                } else {
                    console.error('Failed to fetch user list:', res.status);
                }
            } catch (error) {
                console.error('Error updating user list:', error);
                loadingState.classList.remove('show');
                emptyState.classList.add('show');
            }
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                window.location.href = '/login';
            }
        }

        // ===================================
        // Event Listeners
        // ===================================

        searchInput.addEventListener('input', (e) => {
            filterUsers(e.target.value);
        });

        window.socket.on('update userlist', updateUserList);

        // ===================================
        // Initialization
        // ===================================

        updateUserList();
        setInterval(updateUserList, UPDATE_INTERVAL);
    </script>
</body>
</html>
